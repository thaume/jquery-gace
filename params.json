{"name":"jQuery GACE","tagline":"Start tracking the right things.","body":"# jQuery Google Analytics Custom Events\r\njQuery GACE is a plugin for tracking custom events in your web page. It provides a simple wrapper for some custom elements.\r\n\r\n## Usage\r\n\r\n1. Include jQuery:\r\n\r\n\t```html\r\n\t<script src=\"//ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min.js\"></script>\r\n\t```\r\n\r\n2. Include plugin's code:\r\n\r\n\t```html\r\n\t<script src=\"dist/jquery.gace.min.js\"></script>\r\n\t```\r\n\r\n3. Call the plugin:\r\n\r\n\t```javascript\r\n\tjQuery(function($) {\r\n\t\t$.gace({\r\n\t\t\tua: \"UA-XXXXXXXX-X\"\r\n\t\t});\r\n\t});\r\n\t```\r\n\r\n**Note**\r\n\r\nYou don't need to load the Google Analytics JavaScript (`ga.js` or `analytics.js`) since GACE will load it for you.\r\n\r\n\r\n## Features and Options\r\n\r\n### First configuration\r\n\r\n- Activation:\r\n\t```javascript\r\n\tjQuery(function($) {\r\n\t\t$.gace({\r\n\t\t\tdebug: false,\r\n\t\t\tua: \"UA-XXXXXXXX-X\",\r\n\t\t\tkind: \"ga\",\r\n\t\t\tdomain: \"none\",\r\n\t\t\tsendPageViewOnStart: true\r\n\t\t});\r\n\t});\r\n\t```\r\n\r\n- `debug` *(default: `false`)*\r\n\r\nIf `true`, no events will be send to Google Analytics. Instead, `console.log` will be call with the detail of the event. Very usefull for debugging.\r\n\r\n- `kind` *(default: `\"ga\"`, can be `\"_gaq\"`)*\r\n\r\nYou can choose to send event with `ga()` (new Universal Analytics) or `_gaq.push` (classic Google Analytics). Both can coexist. But Google recommends to use the new Universal Analytics.\r\n\r\n- `domain` *(default: `window.location.hostname`)*\r\n\r\nthe domain you want to track. You can put \"none\" for development (track localhost).\r\n\r\n- `ua` *(default: `null`)*\r\n\r\nYour Google Analytics profile identifier.\r\n\r\n- `sendPageViewOnStart` *(default: `true`)*\r\n\r\nIt will create and send a pageview on plugin load.\r\n\r\n### Better Mobile Browser detection\r\n\r\nToday, Google Analytics can display if the browser is Safari (browser or in-app) but it can't detect if the website was run in standalone (\"Add To Home Screen\" iOS option) or in iOS Chrome.\r\n\r\n- Activation:\r\n\r\n\t```javascript\r\n\t$.gace({\r\n\t\tua: \"UA-XXXXXXXX-X\",\r\n\t\tdomain: \"example.com\",\r\n\r\n\t\tmobileBrowsers: true,\r\n\r\n\t\t// Optional:\r\n\t\tmobileBrowsersMode: \"customVar\"\r\n\t\tmobileBrowsersCustomVarIndex: 1,\r\n\t\tmobileBrowsersDimensionIndex: 1\r\n\t});\r\n\t```\r\n\r\n- `mobileBrowsersMode` *(default: `\"customVar\"`)*\r\n\r\nThis option control the way to store the browser events in Google Analytics. You can use:\r\n\r\n\r\n- **`\"event\"`**\r\n\r\nWill store the informations in \"Events\" with this organisation:\r\n\r\n**Mobile Browser Kind > view > [browser name]**\r\n\r\nWhere [browser name] will be: iOS Safari, iOS standalone, iOS UIWebView or iOS Chrome.\r\n\r\n- **`\"dimension\"`**\r\n\r\nIf you are using Universal Analytics, you can configure custom Dimensions. You can use 20 dimensions. The browser version is more a Dimension (context) than an event.\r\nYou can provide the index you want to use.\r\n\r\n- **`\"customVar\"`**\r\n\r\nThis is for the old (actual in fact) Google Analytics (`ga.js`).\r\nYou can use 5 custom variables. If you want to store the mobile version as a custom variable,\r\n\r\n- `mobileBrowsersCustomVarIndex` *(default: `1`)*\r\n\r\nProvide the customVar index you want to use if you have chosen the \"customVar\".\r\n\r\n- `mobileBrowsersDimensionIndex` *(default: `1`)*\r\n\r\nProvide the dimension index you want to use if you have chosen the \"dimension\".\r\n\r\n### Inactive Tab\r\n\r\nDo you know a lot of users will open your page, navigate in an other tab for one or two minutes, and then be back on your page? To track how many times your page was put in background (inactive) you can activate the GACE option.\r\n\r\n- Activation:\r\n\r\n\t```javascript\r\n\t$.gace({\r\n\t\tua: \"UA-XXXXXXXX-X\",\r\n\t\tdomain: \"example.com\",\r\n\r\n\t\tinactiveTab: true,\r\n\r\n\t\t// Optional: \r\n\t\tinactiveTabMax: 10,\r\n\t\tinactiveTabMinTime: 3\r\n\t});\r\n\t```\r\n\r\nWhen the user `blur` the window, a counter will start in the background. When he will `focus` your page again, an event will be send to Google Analytics.\r\n\r\n- `inactiveTabMax` *(default: `10`)*\r\n\r\nThis setting is use to track the maximum of inactive events per page you want to track.\r\nImagine a visitor blur and focus your page 30 times in 2 minutes, you will have a lot of useless data in your analytics. Instead, you can control how many times in maximum the events will be send. It's 10 by default, you can adjust it with your needs.\r\n\r\n- `inactiveTabMinTime` *(default: `3`, in seconds)*\r\n\r\nThis settings control how much time the page has to be in background before sending an event. For example, if a visitor open your page, switch to Twitter, and get back on your page in less then the 3 seconds, this is not really an \"inactive tab\" since 3 seconds is very short. You can adjust what \"is\" an inactive tab for you. It can be 1 second, or 60 seconds, choose what fit for you.\r\n\r\n- `inactiveTabMaxTime` *(default: `null`, in seconds)*\r\n\r\nSame as `inactiveTabMinTime`, default to \"null\" so we keep tracking everything. If you don't want to track inactive tab more than X seconds, put it here.\r\n\r\nEvent format:\r\n\r\n**Activity > inactive > tab > [time in seconds]**\r\n\r\nWhere [time in seconds] will be the time the page was in background, as value.\r\n\r\nExample:\r\n\r\n*Activity > inactive > tab > 23*\r\n\r\n### Outbound Links\r\n\r\nIn Google Analytics there is no way to know what externals or download links your visitor has clicked. If you have a download like a PDF or other, you can't track it. GACE provides a flexible way to track this events.\r\n\r\n- Activation:\r\n\r\n\t```javascript\r\n\t$.gace({\r\n\t\tua: \"UA-XXXXXXXX-X\",\r\n\t\tdomain: \"example.com\",\r\n\r\n\t\toutboundLinks: true,\r\n\r\n\t\t// Optional: \r\n\t\toutboundLinksElements: $(\"a.ga-track\"),\r\n\t\toutboundLinksOnlyBlank: false,\r\n\t\toutboundLinksTimeout: 200,\r\n\t});\r\n\t```\r\n\r\n- `outboundLinksElements` *(default: `$(\"a\")`)*\r\n\r\nBy default, GACE will track every `<a>` with an external link (`this.hostname !== document.location.hostname`). If you want to track specific elements, just pass them to this option.\r\n\r\n- `outboundLinksOnlyBlank` *(default: `false`)*\r\n\r\nGACE will track all the external links, but you can specify if you just want to track links with `target=\"_blank\"`.\r\n\r\nWhy?\r\n\r\nBecause links with no `target=\"_blank\"` have to use a `setTimeout` to properly send the event to Google Analytics before changing the page.\r\n\r\n- `outboundLinksTimeout` *(default: `200`, in milliseconds)*\r\n\r\nThis timeout can be configured with this option.\r\n\r\nEvent format:\r\n\r\n**Outbound Links > [hostname] > [link]**\r\n\r\nExample:\r\n\r\n*Outbound Links > facebook.com > http://facebook.com/mypages*\r\n\r\n### Social Tracking\r\n\r\nThis plugin integrates a simple tracker for Facebook and Twitter shares activity. It will load the Twitter and Facebook SDK so you just need to put your HTML but not load the Twitter and Facebook widget JavaScript.\r\n\r\n- Activation:\r\n\r\n\t```javascript\r\n\t$.gace({\r\n\t\tua: \"UA-XXXXXXXX-X\",\r\n\t\tdomain: \"example.com\",\r\n\r\n\t\tsocialTracking: [\"Facebook\", \"Twitter\"],\r\n\r\n\t\t// Optional: \r\n\t\tsocialTrackingKind: \"social\",\r\n\t\tsocialTrackingTime: false,\r\n\r\n\t\tfbAppId: \"1234567\"\r\n\t});\r\n\t```\r\n\r\n- `socialTracking` *(default: `[]`)*\r\n\r\nThis is the Array of networks you want to track. Only Facebook and Twitter are supported for the moment.\r\n\r\n- `socialTrackingKind` *(default: `\"social\"`)*\r\n\r\nChange the way social events are stored. Google Analytics have a special section Under: Traffic Source > Social > Plugins.\r\nBy default, GACE uses `_trackSocial` and `ga('send', 'social')`.\r\nBut you can track them as a classic Event, just change this option to \"event\".\r\n\r\n- `socialTrackingTime` *(default: `false`)*\r\n\r\nThis will set a eventValue to each social events. It can be interesting to see when they share the page. Is it 2 seconds after the page is open? 2 minutes?\r\nIf you activate this, your action name in the Plugin section will look like: \"Tweet (24 sec)\". That mean the visitor tweet the link 24 seconds after he was on the page.\r\n\r\n\r\nEvent format:\r\n\r\n**Sharing > [network] [share type] > [link]**\r\n\r\nExample:\r\n\r\n*Sharing > Twitter Tweet > http://mywebsite.com*\r\n\r\n*Sharing > Facebook Share > http://mywebsite.com*\r\n\r\n*Sharing > Facebook Like > http://mywebsite.com*\r\n\r\n### Form events\r\n\r\nGACE is compatible with [jQuery Validation Engine](https://github.com/posabsolute/jQuery-Validation-Engine). If you use this plugin on a `form`, you can detect when a visitor submit a form with errors. And when he submit the form without errors. It's interesting to see the proportion of users trying to send something and users that really send something.\r\n\r\n- Activation:\r\n\r\n\t```javascript\r\n\t$.gace({\r\n\t\tua: \"UA-XXXXXXXX-X\",\r\n\t\tdomain: \"example.com\",\r\n\r\n\t\tformEvents: true\r\n\t});\r\n\t```\r\n\r\n- Then, you have to specify the submit button you want to track:\r\n\r\n\r\n    <form>\r\n        <input type=\"submit\" data-gace-submit value=\"send\"/>\r\n    </form>\r\n\r\n\r\nEvent format:\r\n\r\n**Form > [status] > [identifier]**\r\n\r\nExample:\r\n\r\n*Form > valid > contact*\r\n\r\n*Form > not valid > contact*\r\n\r\n### Scroll Events\r\n\r\nThis feature is for landing pages or content pages. You want to track if a user actually read your content. GACE will track two metrics: if the bloc id visible + how many times he stays on the bloc.\r\n\r\nbloc read = scroll position (bloc visible) + time at this position.\r\n\r\nYou configure every bloc in your HTML, this way:\r\n\r\n\t<div data-gace-bloc=\"feature3\" data-gace-time=\"2\">\r\n\t</div>\r\n\r\n- Activation:\r\n\r\n\t```javascript\r\n\t$.gace({\r\n\t\tua: \"UA-XXXXXXXX-X\",\r\n\t\tdomain: \"example.com\",\r\n\r\n\t\tscrollEvents: true\r\n\t});\r\n\t```\r\n\r\n- `data-gace-bloc` *(choose a correct name, for example: `\"pricing\"`)*\r\n\r\nName of the bloc you want to track\r\n\r\n- `data-gace-time` *(default: `1`, in seconds)*\r\n\r\nThe minimum time needed on the bloc to trigger the event.\r\n\r\n- `data-gace-view` *(default: `100`, in percentage)*\r\n\r\nThe percentage of the bloc visible on the page. By default, all the bloc has to be read (100%). But you can adjust it. If you want to trigger the event only when the user see 40% on the bloc, add:\r\n\r\n\t<div data-gace-bloc=\"feature3\" data-gace-time=\"2\" data-gace-view=\"40\">\r\n\t</div>\r\n\r\nWhen a bloc with `data-gace-bloc` is visible and the minimum time on the bloc is done.\r\n\r\nEvent format:\r\n\r\n**Read > scroll > [data-gace-bloc]**\r\n\r\nExample:\r\n\r\n*Read > scroll > pricing*\r\n\r\n### DFP Ads Events (TODO)\r\nWhat if you can track if an ad from DFP has been viewed? Same concept as scroll events, with the ads. And what if you can track the clicks in your Google Analytics Event from your DFP ads?\r\n\r\n- Activation:\r\n\r\n\t```javascript\r\n\t$.gace({\r\n\t\tua: \"UA-XXXXXXXX-X\",\r\n\t\tdomain: \"example.com\",\r\n\r\n\t\tdfpScrollEvents: true,\r\n\t\tdfpClicksEvents: true\r\n\t});\r\n\t```\r\n\r\n- `dfpClicksEvents` *(default: `false`)*\r\n\r\nDetect the clicks on your DFP ads.\r\n\r\n- `dfpScrollEvents` *(default: `false`)*\r\n\r\nDetect if an ad as been viewed (scroll + minimum time)\r\n\r\nEvent format:\r\n\r\n**DFP > view > [ad identifier]**\r\n\r\nExample:\r\n\r\n**DFP > view > banner**\r\n\r\n## Structure\r\n\r\nThe basic structure of the project is given in the following way:\r\n\r\n```\r\n├── demo/\r\n│   └── index.html\r\n├── dist/\r\n│   ├── jquery.gace.js\r\n│   └── jquery.gace.min.js\r\n├── src/\r\n│   └── jquery.gace.js\r\n├── .gitignore\r\n├── .jshintrc\r\n├── .travis.yml\r\n├── Gruntfile.js\r\n└── package.json\r\n```\r\n\r\n## Guides\r\n\r\n### Install Dependencies (for development only)\r\n\r\n1. Grunt\r\n\t\r\n\t```shell\r\n\tnpm install -g grunt-cli\r\n\t```\r\n\r\n2. Packages\r\n\t\r\n\t```shell\r\n\tnpm install\r\n\t```\r\n\r\n3. Build\r\n\r\n\t```shell\r\n\tgrunt\r\n\t```\r\n\r\n4. Server\r\n\r\n\tpython -m SimpleHTTPServer 8000\r\n\topen http://localhost:8000/demo\r\n\r\n## TODO\r\n\r\n- DFP Events\r\n- Scroll Events\r\n- hitCallback for outboundLinks\r\n- hitCallback for form submit\r\n\r\n## Contributing\r\n\r\nHey! All features are not implemented, please add an issue or a comment if you really need that features. That could drive the development. Thanks\r\n\r\nBefore sending a pull request remember to follow [jQuery Core Style Guide](http://contribute.jquery.org/style-guide/js/).\r\n\r\n1. Fork it!\r\n2. Create your feature branch: `git checkout -b my-new-feature`\r\n3. Make your changes on the `src` folder, never on the `dist` folder.\r\n4. Commit your changes: `git commit -m 'Add some feature'`\r\n5. Push to the branch: `git push origin my-new-feature`\r\n6. Submit a pull request\r\n\r\n## History\r\n- 0.0.2: Stabilize and add Scroll Events.\r\n- 0.0.1: First version.\r\n\r\n## License\r\n\r\n[MIT License](http://zenorocha.mit-license.org/)\r\n\r\n\r\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/damln/jquery-gace/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\r\n\r\n","google":"UA-44749947-1","note":"Don't delete this file! It's used internally to help with page regeneration."}